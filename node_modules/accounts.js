var crypto = require('crypto'),
    encode = require('encode'),
    redis = require("redis").createClient();

function email2key(username)
{
    var result = 'user/' + encode.encode_segment(String(username).toLowerCase());
    return result;
}

function encryptPassword(secret, options, callback)
{
    var rounds = options && options.rounds || 6400;
    var saltSize = options && options.saltSize || 16;
    var salt = options && options.salt || crypto.randomBytes(saltSize).toString('binary');
    var size = options && options.size || 20;

    crypto.pbkdf2(secret, salt, rounds, size, function (err, key)
    {
        var hash = '$pbkdf2$' + rounds + '$' + encode.ab64encode(salt) + '$' + encode.ab64encode(key);
        callback(err, hash);
    });
}

var m_dummy;
encryptPassword('password', null, function (err, value)
{
    m_dummy = value;
});

var accounts = module.exports =
{
    createUser: function (username, password, name, callback)
    {
        encryptPassword(password, null, function (err, value)
        {
            if (err) { callback(err); return; }
            var args =
            {
                name: name,
                email: username,
                password: value
            };
            redis.hmset(email2key(username), args, function (err)
            {
                if (err) { callback(err); return; }
                callback();
            });
        });
    },

    getUserProperty: function (username, propname, callback)
    {
        redis.hget(email2key(username), propname, callback)
    },

    setPassword: function (username, password, callback)
    {
        encryptPassword(password, null, function (err, hash)
        {
            if (err) { callback(err); return; }
            redis.hset(email2key(username), "password", hash, function (err)
            {
                if (err) { callback(err); return; }
                callback();
            });
        });
    },

    verify: function (username, password, callback)
    {
        redis.hget(email2key(username), "password", function (err, value)
        {
            accounts.verifyPassword(password, value || m_dummy, function (err, result)
            {
                if (err) { callback(err); return; }
                if (value && result)
                {
                    callback(null, username);
                }
                else
                {
                    callback(null, false, { message: 'Wrong E-mail/password combination.' });
                }
            });
        });
    },

    verifyPassword: function (secret, hash, callback)
    {
        parts = (/^\$pbkdf2\$([^\$]+)\$([^\$]+)\$([^\$]+)$/).exec(hash);
        encryptPassword(
            secret,
            {
                rounds: parts && parts[1] && (0|parts[1]),
                salt: parts && parts[2] && encode.ab64decode(parts[2])
            },
            function (err, key)
            {
                callback(err, !!(parts && hash === key));
            }
        );
    }
};

